package $PKG$;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.uide.parser.Ast;
import org.eclipse.uide.parser.IModel;
import org.eclipse.uide.parser.IToken;
import org.eclipse.uide.parser.ParseError;


//////////////////////////////////////////////////////////////////
//                                                              //
//  This file was auto-generated by the LPG Eclipse Tooling.    //
//  It is safe to edit this file. It will not be overwritten.   //
//                                                              //
//////////////////////////////////////////////////////////////////

public class Model implements IModel {

    Ast ast;
    AbstractParser parser;
    List errors = new ArrayList();
    
    public Ast getAst() {
        return ast;
    }

    public IToken getTokenAtCharacter(int offset) {
        return parser.prsStream.getTokenAtCharacter(offset);
    }

    public String getString(IToken token) {
        if (token == null)
            return "<null>";
        return token.toString(parser.scanner.contents);
    }

    public String getString(Ast node) {
        return node.toString(parser.scanner.contents);
    }

    public int getTokenCount() {
        return parser.prsStream.len;
    }

    public char[][] getKeywords() {
        return Scanner.KEYWORDS;
    }

    public boolean isKeywordStart(char c) {
        return Scanner.isKeywordStart(c);
    }

    public int getTokenIndexAtCharacter(int offset) {
        return parser.prsStream.getTokenIndexAtCharacter(offset);
    }

    public IToken getTokenAt(int index) {
        return parser.prsStream.getTokenAt(index);
    }

    public boolean isSpace(IToken token) {
        return parser.scanner.isSpace(token);
    }

    public boolean isKeyword(IToken token) {
        return parser.scanner.isKeyword(token);
    }

    public List getErrors() {
        return errors;
    }
    
    public IToken getLastErrorToken() {
        if (hasErrors())
            return ((ParseError)errors.get(0)).token;
        else
            return null;
    }
    
    public boolean hasErrors() {
        return errors.size() > 0;
    }

    public char[] getContents() {
        return parser.scanner.contents;
    }
    
    public void setContents(char contents[]) {
        parser.scanner.contents = contents;
    }
}
